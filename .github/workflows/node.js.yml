name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  backend:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: shotspot_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready

    strategy:
      matrix:
        node-version: [20.x]  # Focus on latest LTS version

    steps:
    - uses: actions/checkout@v5
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install Backend Dependencies
      working-directory: backend
      run: npm ci

    - name: Run Backend Linting
      working-directory: backend
      run: npm run lint

    - name: Run Backend Tests
      working-directory: backend
      env:
        NODE_ENV: test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: shotspot_test
        JWT_SECRET: test-jwt-secret
        SESSION_SECRET: test-session-secret
      run: |
        npm run migrate
        npm test -- --coverage

    # Coverage reporting can be added later with Codecov or similar services

  frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]  # Focus on latest LTS version

    steps:
    - uses: actions/checkout@v5
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Frontend Dependencies
      working-directory: frontend
      run: npm ci

    - name: Run Frontend Linting
      working-directory: frontend
      run: npm run lint

    - name: Run Frontend Tests
      working-directory: frontend
      run: npm test -- --coverage

    # Coverage reporting can be added later with Codecov or similar services

    - name: Build Frontend
      working-directory: frontend
      run: npm run build

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x

    - name: Install Backend Dependencies
      working-directory: backend
      run: npm ci

    - name: Install Frontend Dependencies
      working-directory: frontend
      run: npm ci

    - name: Run npm audit (Backend)
      working-directory: backend
      run: |
        echo "Running npm audit for backend..."
        npm audit --audit-level=high || true
        echo "Note: Moderate vulnerabilities in validator package (express-validator dependency) are known and tracked"

    - name: Run npm audit (Frontend)
      working-directory: frontend
      run: |
        echo "Running npm audit for frontend..."
        npm audit --audit-level=high
        echo "Frontend security check passed!"

    - name: Check for critical vulnerabilities (Backend)
      working-directory: backend
      run: npm audit --audit-level=critical

    - name: Check for critical vulnerabilities (Frontend)
      working-directory: frontend
      run: npm audit --audit-level=critical

    # Security scanning can be added later with Snyk or other tools

  # E2E tests disabled until Cypress is configured
  # Uncomment when E2E tests are implemented
  # e2e:
  #   name: E2E Tests
  #   needs: [backend, frontend]
  #   runs-on: ubuntu-latest
  #
  #   services:
  #     postgres:
  #       image: postgres:14
  #       env:
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: shotspot_test
  #       ports:
  #         - 5432:5432
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #
  #   steps:
  #   - uses: actions/checkout@v5
  #
  #   - name: Use Node.js 20.x
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: 20.x
  #       cache: 'npm'
  #       cache-dependency-path: |
  #         frontend/package-lock.json
  #         backend/package-lock.json
  #
  #   - name: Install Backend Dependencies
  #     working-directory: backend
  #     run: npm ci
  #
  #   - name: Install Frontend Dependencies
  #     working-directory: frontend
  #     run: npm ci
  #
  #   - name: Build Frontend
  #     working-directory: frontend
  #     run: npm run build
  #
  #   - name: Start Backend Server
  #     working-directory: backend
  #     env:
  #       NODE_ENV: test
  #       POSTGRES_USER: postgres
  #       POSTGRES_PASSWORD: postgres
  #       DB_USER: postgres
  #       DB_PASSWORD: postgres
  #       DB_HOST: localhost
  #       DB_PORT: 5432
  #       DB_NAME: shotspot_test
  #       JWT_SECRET: test-jwt-secret
  #       SESSION_SECRET: test-session-secret
  #     run: |
  #       npm run migrate
  #       npm start &
  #       sleep 5
  #
  #   - name: Run E2E Tests
  #     working-directory: frontend
  #     run: npm run test:e2e
  #
  #   - name: Upload E2E Test Results
  #     uses: actions/upload-artifact@v4
  #     if: always()
  #     with:
  #       name: cypress-results
  #       path: frontend/cypress/videos/
